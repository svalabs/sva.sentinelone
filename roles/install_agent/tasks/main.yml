---
# tasks file for install_agent
- name: "Gather facts"
  ansible.builtin.setup:
  when: ansible_facts.distribution is not defined

- name: "Preflight check: Fail when OS is unknown"
  ansible.builtin.fail:
    msg: "The package management system on this system is unknown. This can happen if the role runs on an unsupported system."
  when: pkg_format == 'unknown'

- name: "Download {{ pkg_format }} agent {{ agent_version }} to localhost"
  sentinelone_download_agent:
    console_url: "{{ console_url }}"
    token: "{{ api_token }}"
    site: "{{ site }}"
    os_type: "{{ ansible_facts.os_family }}"
    packet_format: "{{ pkg_format }}"
    architecture: "{% if pkg_arch == 'x86_64' %}64_bit{% elif pkg_arch == 'i386' %}32_bit{% elif pkg_arch == 'aarch64' %}aarch64{% endif %}"
    signed_packages: "{{ signed_packages }}"
    agent_version: "{{ agent_version }}"
    custom_version: "{{ custom_version | default(omit) }}"
  register: return_download_agent
  delegate_to: localhost

- name: "Block: Get registration token from API"
  block:
    - name: "Get siteid"
      ansible.builtin.uri:
        url: "{{ api_uri }}sites?name={{ site }}&state=active"
        method: GET
        return_content: true
        headers:
          Accept: application/json
          Authorization: "{{ api_token }}"
        validate_certs: true
        status_code: 200
      register: siteobj
      delegate_to: localhost
      until: ((siteobj.json.data | length) > 0) and (siteobj.status == 200)
      retries: 3
      delay: 20

    - name: "Extract siteid"
      ansible.builtin.set_fact:
        siteid: "{{ siteobj.json.data.sites[0].id }}"

    - name: "Get group id"
      ansible.builtin.uri:
        url: "{{ api_uri }}groups?name={{ group }}&siteIds={{ siteid }}"
        method: GET
        return_content: true
        headers:
          Accept: application/json
          Authorization: "{{ api_token }}"
        validate_certs: true
        status_code: 200
      register: groupobj
      delegate_to: localhost
      until: ((groupobj.json.data | length) > 0) and (groupobj.status == 200)
      retries: 3
      delay: 20
      when: group is defined

    - name: "Extract groupid"
      ansible.builtin.set_fact:
        groupid: "{{ groupobj.json.data[0].id }}"
      when: group is defined

    - name: "Set endpoint URI to get the correct registration token"
      ansible.builtin.set_fact:
        reg_token_uri: "{{ 'groups/{group_id}/token' if group is defined else 'sites/{site_id}/token' }}"

    - name: "Get registration token"
      ansible.builtin.uri:
        url: "{{ api_uri }}{{ reg_token_uri }}"
        method: GET
        return_content: true
        headers:
          Accept: application/json
          Authorization: "{{ api_token }}"
        validate_certs: true
        status_code: 200
      register: reg_token_obj
      delegate_to: localhost
      until: ((reg_token_obj.json.data | length) > 0) and (reg_token_obj.status == 200)
      retries: 3
      delay: 20

- name: "Execute tasks for: {{ ansible_facts.os_family }}"
  ansible.builtin.include_tasks: "{{ ansible_facts.os_family }}.yml"
  vars:
    remote_pkg_path: "{{ '/tmp/{{ return_download_agent.original_message.filename }}' if ansible_facts.os_family == 'Linux' else
      'C:\\Windows\\{{ return_download_agent.original_message.filename }' }}"

- name: "Remove agent install package from localhost"
  ansible.builtin.file:
    path: "{{ return_download_agent.original_message.full_path }}"
    state: absent
  delegate_to: localhost

- name: "Check if new client appears in management console"
  ansible.builtin.uri:
    url: "{{ api_uri }}agents?siteIds={{ siteid }}&computerName={{ ansible_hostname }}&isActive=true"
    method: GET
    return_content: true
    headers:
      Accept: application/json
      Authorization: "{{ api_token }}"
    validate_certs: true
    status_code: 200
  register: registrationstatus
  delegate_to: localhost
  until: ((registrationstatus.json.data | length) > 0) and (registrationstatus.status == 200)
  retries: 3
  delay: 20
# TODO Create Role requirements file ansible.windows collection
